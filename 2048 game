#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>
#include <time.h>

int check [100] = {0};

int random_2or4 (){
    int temp;
    time_t t;
    srand ((unsigned) time (&t));
    temp = rand() % 10;
    if (temp >7){
        return 4;
    }
    else {
        return 2;
    }
}

int random_position (int n){
    int temp;
    time_t t;
    srand ((unsigned) time (&t));
    temp = rand() % (n*n);
    return temp;
}

void add_random (int arr[], int n){
    int x;
    x = random_position(n);
    while (check[x] == 1){
        x = random_position(n);
    }
    arr[x] = random_2or4();
    check[x] = 1;
}

void check_sum_top (int arr[], int n){
     int i;
     int j;
     for (i = 0; i < n-1; i++){
        for (j = 0; j < n; j++){
            if (arr[(n*i)+j] == arr[(n*(i+1))+j]){
                arr[(n*i)+j] = arr[(n*i)+j]*2;
                arr[(n*(i+1))+j] = 0;
            }
        }
     }
}

void check_sum_bot (int arr[], int n){
    int i;
    int j;
    for (i = n-2; i >= 0; i--){
        for (j = 0; j < n; j++){
            if (arr[(n*i)+j] == arr[(n*(i+1))+j]){
                arr[(n*(i+1))+j] = arr[(n*(i+1))+j]*2;
                arr[(n*i)+j] = 0;
            }
        }
    }
}

void check_sum_right (int arr[], int n){
    int i;
    int j;
    for (i = 0; i < n; i++){
        for (j = n-2; j >= 0; j--){
            if (arr[(i*n)+j] == arr[(i*n)+j+1]){
                arr[(i*n)+j+1] = arr[(i*n)+j] * 2;
                arr[(i*n)+j] = 0;
            }
        }
    }
}

void check_sum_left (int arr[], int n){
    int i;
    int j;
    for (i = 0; i < n; i++){
        for (j = 0; j <n-1; j++){
            if (arr[(i*n)+j] == arr[(i*n)+j+1]){
                arr[(i*n)+j] = arr[(i*n)+j] * 2;
                arr[(i*n)+j+1] = 0;
            }
        }
    }
}

void check_update(int arr[], int n){
    int i;
    for (i = 0; i < n*n; i++){
        if (arr[i] == 0){
            check [i] = 0;
        }
        else{
            check [i] = 1;
        }
    }
}

void print (int arr[], int n){
    int i;
    for (i = 0; i < n*n; i++){
        if (i%n == 0){
            printf ("\n\n");
        }
        if (arr[i] == 0){
            printf ("_\t");
        }
        else{
             printf ("%d\t", arr[i]);
        }
    }
}

void init (int arr[], int n){
    int i;
    int x;
    int y;
    for (i = 0; i < n*n; i++){
        arr[i] = 0;
    }
    x = random_position(n);
    y = random_position(n);
    while (x == y){
        y = random_position(n);
    }
    check [x] = 1;
    check [y] = 1;
    arr [x] = random_2or4();
    arr [y] = random_2or4();
}

void move_top (int arr[], int n){
    int i;
    int j;
    int k;
    int count;
    for (j = 0; j < n; j++){
        for (i = 0, count = 1; i < n, count <= n; count++){
            if (arr[(n*i)+j] == 0){
                for (k = i+1; k < n; k++){
                    arr[((k-1)*n)+j] = arr[(k*n)+j];
                }
                arr[(n*(n-1))+j] = 0;
            }
            else{
                i++;
            }
        }
    }
}

void move_left (int arr[], int n){
    int i;
    int j;
    int k;
    int count;
    for (i = 0; i < n; i++){
        for (j = 0, count = 1; j < n, count <= n; count++){
            if (arr[(n*i)+j] == 0){
                for (k = j+1; k < n; k++){
                    arr[(i*n)+k-1] = arr[(i*n)+k];
                }
                arr[(n*i)+n-1] = 0;
            }
            else{
                j++;
            }
        }
    }
}

void move_right (int arr[], int n){
    int i;
    int j;
    int k;
    int count;
    for (i = 0; i < n; i++){
        for (j = n-1, count = 1; j >= 0, count <= n; count++){
            if (arr[(n*i)+j] == 0){
                for (k = j-1; k >= 0; k--){
                    arr[(n*i)+k+1] = arr[(n*i)+k];
                }
                arr[(i*n)] = 0;
            }
            else{
                j--;
            }
        }
    }
}

void move_bot (int arr[], int n){
    int i;
    int j;
    int k;
    int count;
    for (j = 0; j < n; j++){
        for (i = n-1, count = 1; i >= 0, count <= n; count++){
            if (arr[(n*i)+j] == 0){
                for (k = i-1; k >= 0; k--){
                    arr[((k+1)*n)+j] = arr[((k)*n)+j];
                }
                arr[j] = 0;
            }
            else{
                i--;
            }
        }
    }
}

void check_win (int arr[], int n){
    int i;
    int j;
    int flag_filled = 1;
    int flag_2048 = 0;
    for (i = 0; i < n; i++){
        for (j = 0; j < n; j++){
            if (check[(i*n)+j] == 0){
                flag_filled = 0;
            }
            if (arr[(i*n)+j] == 2048){
                flag_2048 = 1;
            }
        }
    }
    if (flag_filled == 1){
        printf ("\nGame Over.\n");
        exit (0);
    }
    if (flag_2048 == 1){
        printf ("\nYou win.\n");
        exit (0);
    }
}

int main (void){
    printf ("\nW - up\nA - left\nD - right\nS - down\nQ - quit\n");
    int n = 4;
    char move;
    int arr[n*n];
    init (arr, n);
    while (1){
        print (arr, n);
        check_win (arr, n);
        printf ("\nEnter input: ");
        fflush(stdin);
        scanf ("%c", &move);
        switch (move){
        case 'w':
            move_top (arr, n);
            check_sum_top (arr, n);
            move_top (arr, n);
            check_update(arr, n);
            add_random (arr, n);
            break;

        case 'a':
            move_left (arr, n);
            check_sum_left (arr, n);
            move_left (arr, n);
            check_update(arr, n);
            add_random (arr, n);
            break;

        case 'd':
            move_right (arr, n);
            check_sum_right (arr, n);
            move_right (arr, n);
            check_update(arr, n);
            add_random (arr, n);
            break;

        case 's':
            move_bot (arr, n);
            check_sum_bot (arr, n);
            move_bot (arr, n);
            check_update(arr, n);
            add_random (arr, n);
            break;

        case 'q':
            exit(0);
            break;

        default:
            printf ("\nInvalid move.");
            break;
        }
    }
    return 0;
}
