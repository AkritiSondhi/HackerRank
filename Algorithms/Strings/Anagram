import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the anagram function below.
    static int anagram(String s) {
        int length = s.length();

        if (length % 2 == 1) {
            return -1;
        }

        HashMap<Character, Integer> map = new HashMap<>();

        for (int i = 0; i < length / 2; i++) {
            char character = s.charAt(i);
            map.put(character, map.getOrDefault(character, 0) + 1);
        }

        for (int i = length / 2; i < length; i++) {
            char character = s.charAt(i);
            map.put(character, map.getOrDefault(character, 0) - 1);

            if (map.get(character) < 0) {
                map.remove(character);
            }
        }

        int count = 0;
        for (Character letter: map.keySet()) {
            count += map.get(letter);
        }

        return count;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = anagram(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
