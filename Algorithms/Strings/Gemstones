import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the gemstones function below.
    static int gemstones(String[] arr) {
        int numOfString = arr.length;
        int[] alphabetFreq = new int[26];

        for (int i = 0; i < numOfString ; i++) {
            boolean[] isAlreadyMarked = new boolean[26];

            for (int j = 0; j < arr[i].length(); j++) {
                if (!isAlreadyMarked[arr[i].charAt(j) - 'a']) {
                    isAlreadyMarked[arr[i].charAt(j) - 'a'] = true;
                    alphabetFreq[arr[i].charAt(j) - 'a']++;
                }
            }
        }

        int count = 0;
        for (int i = 0; i < 26; i++) {
            if(alphabetFreq[i] == numOfString) {
                count++;
            }
        }

        return count;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String[] arr = new String[n];

        for (int i = 0; i < n; i++) {
            String arrItem = scanner.nextLine();
            arr[i] = arrItem;
        }

        int result = gemstones(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
