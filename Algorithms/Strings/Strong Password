import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the minimumNumber function below.
    static int minimumNumber(int n, String password) {
        int count = 0;
        
        Pattern digitPattern = Pattern.compile("(\\d)");
        Pattern upperCasePattern = Pattern.compile("([A-Z])");
        Pattern lowerCasePattern = Pattern.compile("([a-z])");
        Pattern specialCharacterPattern = Pattern.compile(".*[-!@#$%^&*()+]+.*");
        
        Matcher digitMatcher = digitPattern.matcher(password);
        Matcher upperCaseMatcher = upperCasePattern.matcher(password);
        Matcher lowerCaseMatcher = lowerCasePattern.matcher(password);
        Matcher specialCharacterMatcher = specialCharacterPattern.matcher(password);
        
        if (!digitMatcher.find()) {
            count++;
        }
        if (!upperCaseMatcher.find()) {
            count++;
        }
        if (!lowerCaseMatcher.find()) {
            count++;
        }
        if (!specialCharacterMatcher.find()) {
            count++;
        }
        
        return count > (6 - n) ? count : 6 - n;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String password = scanner.nextLine();

        int answer = minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
