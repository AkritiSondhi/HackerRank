import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the weightedUniformStrings function below.
    static String[] weightedUniformStrings(String s, long[] queries) {
        String[] answers = new String[queries.length];
        HashSet<Long> uniformWeightSet = new HashSet<>();
        int size = s.length();

        long continuousStringWeight = (long) (s.charAt(0) - 'a' + 1);
        uniformWeightSet.add(continuousStringWeight);

        for(int i = 1; i < size; i++) {
            if(s.charAt(i) == s.charAt(i-1)) {
                continuousStringWeight = continuousStringWeight + s.charAt(i) - 'a' + 1;
            }
            else {
                continuousStringWeight = s.charAt(i) - 'a' + 1;
            }
            uniformWeightSet.add((long) continuousStringWeight);
        }

        int queriesLength = queries.length;
        for (int i = 0; i < queriesLength; i++) {
            if(uniformWeightSet.contains(queries[i])) {
                answers[i] = "Yes";
            }
            else {
                answers[i] = "No";
            }
        }

        return answers;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = scanner.nextLine();

        int queriesCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        long[] queries = new long[queriesCount];

        for (int i = 0; i < queriesCount; i++) {
            long queriesItem = scanner.nextLong();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
            queries[i] = queriesItem;
        }

        String[] result = weightedUniformStrings(s, queries);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(result[i]);

            if (i != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
