import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    static boolean isSorted(int[] q) {
        int n = q.length;
        for (int i = 0; i < n-1; i++) {
            if (q[i] > q[i+1]) {
                return false;
            }
        }
        return true;
    }

    // Complete the minimumBribes function below.
    static void minimumBribes(int[] q) {
        int n = q.length;
        int[] bribes = new int[n];
        
        while (!isSorted(q)) {
            for (int i = 0; i < n-1; i++) {
                if(q[i] > q[i+1]) {
                    if (bribes[q[i] - 1] < 2) {
                        bribes[q[i] - 1]++;
                    }
                    else {
                        System.out.println("Too chaotic");
                        return;
                    }

                    int temp = q[i];
                    q[i] = q[i+1];
                    q[i+1] = temp;
                }
            }
        }

        int bribeSum = 0;
        for (int i = 0; i < n; i++) {
            bribeSum += bribes[i];
        }

        System.out.println(bribeSum);
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            int n = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[] q = new int[n];

            String[] qItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int i = 0; i < n; i++) {
                int qItem = Integer.parseInt(qItems[i]);
                q[i] = qItem;
            }

            minimumBribes(q);
        }

        scanner.close();
    }
}
