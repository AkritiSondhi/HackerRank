import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the sherlockAndAnagrams function below.
    static int sherlockAndAnagrams(String s) {
        HashMap<String, Integer> subStringCountMap = new HashMap<>();
        int stringSize = s.length();
        int anagramCases = 0;

        for (int i = 0; i < stringSize; i++) {
            int[] characterCountTableArray = new int[26];

            for (int j = i; j < stringSize; j++) {
                characterCountTableArray[s.charAt(j) - 'a'] = characterCountTableArray[s.charAt(j) - 'a'] + 1;

                int subStringInMap = 0;
                Object count = subStringCountMap.get(Arrays.toString(characterCountTableArray));
                if (count != null) {
                    subStringInMap = (int)count;
                }

                subStringCountMap.put(Arrays.toString(characterCountTableArray),
                        Integer.valueOf(subStringInMap + 1));
                
            }
        }
        
        for (int count: subStringCountMap.values()) {
            anagramCases += count * (count - 1)/ 2;
        }
        
        return anagramCases;
    }
    
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = sherlockAndAnagrams(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
