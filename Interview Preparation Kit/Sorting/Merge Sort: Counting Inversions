import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    private static long countInversions(int[] arr) {
        int[] aux = arr.clone();
        return mergeSort(arr, 0, arr.length - 1, aux);
    }

    private static long mergeSort(int[] arr, int left, int right, int[] temp) {
        if (left >= right) return 0;

        int mid = left + (right - left) / 2;

        long count = 0;
        count += mergeSort(temp, left, mid, arr);
        count += mergeSort(temp, mid + 1, right, arr);
        count += merge(arr, left, mid, right, temp);

        return count;
    }

    private static long merge(int[] arr, int left, int mid, int right, int[] temp) {
        long count = 0;
        int i = left;
        int j = mid + 1;
        int k = left;

        while (i <= mid || j <= right) {
            if (i > mid) {
                arr[k++] = temp[j++];
            } 
            else if (j > right) {
                arr[k++] = temp[i++];
            } 
            else if (temp[i] <= temp[j]) {
                arr[k++] = temp[i++];
            } 
            else {
                arr[k++] = temp[j++];
                count += mid + 1 - i;
            }
        }

        return count;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            int arr[] = new int[n];
            for(int arr_i=0; arr_i < n; arr_i++){
                arr[arr_i] = in.nextInt();
            }
            System.out.println(countInversions(arr));
        }
    }
}

