import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    private static boolean sieve[];
    private static HashMap<Integer, Long> sumMap = new HashMap();

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        prepareSieveOfAtkin();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            System.out.println(sumMap.getOrDefault(n, 0l));
        }
    }

    private static void prepareSieveOfAtkin() {
        int limit = 1000000;
        sieve = new boolean[limit];

        for (int i = 0; i < limit; i++) {
            sieve[i] = false;
        }

        for (int i = 1; i * i < limit; i++) { 
            for (int j = 1; j * j < limit; j++) { 
                // Main part of Sieve of Atkin 
                int n = (4 * i * i) + (j * j); 
                if (n <= limit && (n % 12 == 1 || n % 12 == 5)) {
                    sieve[n] ^= true;
                }

                n = (3 * i * i) + (j * j); 
                if (n <= limit && n % 12 == 7) {
                    sieve[n] ^= true;
                }

                n = (3 * i * i) - (j * j); 
                if (i > j && n <= limit && n % 12 == 11) {
                    sieve[n] ^= true;
                }
            }
        }

        for (int r = 5; r * r < limit; r++) { 
            if (sieve[r]) { 
                for (int i = r * r; i < limit; i += r * r) {
                    sieve[i] = false;
                }
            } 
        }

        sumMap.put(2, 2l);
        sumMap.put(3, 5l);
        sumMap.put(4, 5l);

        long sum = 2 + 3;
        for (int i = 5; i < limit; i++) {
            if (sieve[i]) {
                sum += i;
            }
            sumMap.put(i, sum);
        }
    }
}

